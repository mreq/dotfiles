[
  // SublimeMagic
  {
    "keys": ["alt+space"],
    "command": "sublime_magic"
  },

  // lsp-copilot
  {
    "keys": ["alt+space"],
    "command": "copilot_accept_completion",
    "context": [
      {
        "key": "copilot.is_on_completion"
      }
    ]
  },

  // Generic: ctrl+hjkl movement
  { "keys": ["ctrl+j"], "command": "move", "args": { "by": "lines", "forward": true } },
  { "keys": ["ctrl+k"], "command": "move", "args": { "by": "lines", "forward": false } },

  {
    "keys": ["ctrl+n"],
    "command": "move",
    "args": { "by": "lines", "forward": true },
    "context": [
      { "key": "auto_complete_visible", "operator": "equal", "operand": true }
    ]
  },

  {
    "keys": ["ctrl+p"],
    "command": "move",
    "args": { "by": "lines", "forward": false },
    "context": [
      { "key": "auto_complete_visible", "operator": "equal", "operand": true }
    ]
  },

  {
    "keys": ["ctrl+n"],
    "command": "move",
    "args": { "by": "lines", "forward": true },
    "context": [
      { "key": "overlay_visible", "operator": "equal", "operand": true }
    ]
  },

  {
    "keys": ["ctrl+p"],
    "command": "move",
    "args": { "by": "lines", "forward": false },
    "context": [
      { "key": "overlay_visible", "operator": "equal", "operand": true }
    ]
  },


  // Generic: Toggle keyboard layout
  {
    "keys": ["alt+backspace"],
    "command": "run_cmd",
    "args": {
      "cmd": "swaymsg input 'type:keyboard' xkb_switch_layout next"
    }
  },

  // Generic: Toggle menu
  {
    "keys": [" ", "m", "m"],
    "command": "toggle_menu",
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Generic: goto definition
  {
    "keys": [" ", "f", "d"],
    "command": "goto_definition",
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Generic: change quotes
  {
    "keys": [" ", "t", "q"],
    "command": "change_quotes",
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Generic: open from menus using vim movement
  {
    "keys": ["ctrl+l"],
    "command": "chain",
    "args": {
      "commands": [
        ["move", { "by": "characters", "forward": true }],
        ["move", { "by": "lines", "forward": true }]
      ]
    },
    "context": [
      { "key": "overlay_visible" }
    ]
  },

  // Generic: open TODO file
  {
    "keys": [" ", "t", "o"],
    "command": "run_cmd",
    "context": [
      { "key": "vi_command_mode_aware" }
    ],
    "args": {
      "cmd": "subl $project_dir/TODO"
    }
  },

  // Navigation: page down
  {
    "keys": ["ctrl+d"],
    "command": "move",
    "args": {
      "by": "pages",
      "forward": true
    },
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Navigation: page down
  {
    "keys": ["ctrl+u"],
    "command": "move",
    "args": {
      "by": "pages",
      "forward": false
    },
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Cursors: create cursor for all matches under
  {
    "keys": ["ctrl+alt+shift+d"],
    "command": "find_all_under"
  },

  // Cursors: create cursor for each selected line
  {
    "keys": ["ctrl+shift+l"],
    "command": "split_selection_into_lines",
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // Cursors: skip
  {
    "keys": ["ctrl+k"],
    "command": "find_under_expand_skip",
    "context": [
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // ChangeList: show
  {
    "keys": [" ", "e"],
    "command": "show_change_list",
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Sidebar: toggle
  {
    "keys": [" ", "l"],
    "command": "chain",
    "args": {
      "commands": [["toggle_side_bar"], ["focus_side_bar"]]
    },
    "context": [
      { "key": "vi_command_mode_aware" }
    ]
  },

  // Sidebar: hide on escape
  {
    "keys": ["escape"],
    "command": "toggle_side_bar",
    "context": [
      { "key": "control", "operand": "sidebar_tree" }
    ]
  },

  // Text: sort lines
  {
    "keys": ["g", "s"],
    "command": "sort_lines",
    "context": [
      { "key": "vi_command_mode_aware" }
    ],
    "args": {
      "case_sensitive": false
    }
  },

  // Git: go to file from status
  {
    "keys": ["g", "c"],
    "command": "git_go_to_file_from_status",
    "context": [
      { "key": "vi_command_mode_aware" }
    ]
  },

  // Texts: delete line
  {
    "keys": ["ctrl+shift+x"],
    "command": "chain",
    "args": {
      "commands": [
        ["expand_selection", { "to": "line" }],
        ["left_delete"]
      ]
    }
  },

  // Text: change quotes
  {
    "keys": [" ", "t", "q"],
    "command": "change_quotes",
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Generic: Copy to system clipboard
  {
    "keys": ["alt+y"],
    "command": "copy",
    "context": [{ "key": "vi_command_mode_aware" }]
  },

  // Terminal: run terminal in project dir
  {
    "keys": ["f9"],
    "command": "run_cmd",
    "args": {
      "cmd": "foot --title \"foot - $( basename $project_dir )\" --working-directory $project_dir"
    }
  },

  // Terminal: run opencode in project dir
  {
    "keys": ["f10"],
    "command": "run_cmd",
    "args": {
      "cmd": "~/.dotfiles/bin/foot/foot-opencode $project_dir"
    }
  },

  // Align arguments: format
  {
    "keys": [" ", "a", "a"],
    "command": "format_arguments",
    "context": [
      { "key": "vi_command_mode_aware" }
    ]
  },

  // Align arguments: align
  {
    "keys": [" ", "a", "i"],
    "command": "align_arguments",
    "context": [
      { "key": "vi_command_mode_aware" }
    ]
  },

  // Copy yaml symbol
  {
    "keys": [" ", "c"],
    "command": "copy_yaml_symbol_to_clipboard",
    "context": [
      { "key": "vi_command_mode_aware" },
      { "key": "selector", "operator": "equal", "operand": "source.yaml" }
    ]
  },

  // Replace in file
  {
    "keys": ["alt+f"],
    "command": "show_panel",
    "args": {
      "panel": "replace",
      "reverse": false,
    }
  },

  // Pretty json
  {
    "keys": [" ", "o", "p"],
    "command": "pretty_json",
    "context": [
      { "key": "vi_command_mode_aware" },
    ]
  },
]
