#!/usr/bin/env python3
from i3ipc import Connection
from notify import notification
import argparse

import os, sys
sys.path.append(os.path.expanduser('~/.dotfiles/python/modules'))
import dotfiles

TMP_FILE_PATH = "/tmp/sway_select_display.cache"

parser = argparse.ArgumentParser()

parser.add_argument("output", nargs="?")
parser.add_argument("--handle-reload", action=argparse.BooleanOptionalAction)

args = parser.parse_args()

result = args.output

sway = Connection()

outputs = sway.get_outputs()
output_names = [o.name for o in sway.get_outputs()]

if result is None:
    if args.handle_reload:
        if os.path.isfile(TMP_FILE_PATH):
            with open(TMP_FILE_PATH, 'r') as f:
                result = f.read().strip()

        else:
            result = 'auto'

if result is None:
    if len(outputs) < 2:
        if outputs[0] and not outputs[0].active:
            sway.command('output ' + outputs[0] + ' enable')
        notification('sway_select_display', message='only one output', app_name='sway')
        exit(1)

    options = ['auto'] + output_names

    result = dotfiles.rofi.dmenu(options)

    if result not in options:
        exit(0)

if result == 'auto':
    for output in outputs:
        if "HDMI" in output.name:
            result = output.name
            break

    if result == 'auto':
        result = outputs[0].name

for output in outputs:
    if output.name == result:
        if not output.active:
            print('output ' + output.name + ' enable')
            sway.command('output ' + output.name + ' enable')
    else:
        if output.active:
            print('output ' + output.name + ' disable')
            sway.command('output ' + output.name + ' disable')

with open(TMP_FILE_PATH, 'w') as f:
    f.write(result + "\n")
