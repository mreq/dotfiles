#!/usr/bin/env python3
from i3ipc import Connection
from notify import notification
import argparse

import os, sys

sys.path.append(os.path.expanduser("~/.dotfiles/python/modules"))
import dotfiles

TMP_FILE_PATH = "/tmp/sway_select_display.cache"

parser = argparse.ArgumentParser()

parser.add_argument("output", nargs="?")
parser.add_argument("--handle-reload", action=argparse.BooleanOptionalAction)

args = parser.parse_args()

result = args.output

sway = Connection()

outputs = sway.get_outputs()
output_names = [o.name for o in sway.get_outputs()]


def refresh_rate_is_within_limits(refresh):
    # max 120hz
    return refresh < 130000


def get_best_mode_from_output(output):
    highest_product = 0
    target_mode = output.modes[0]

    for mode in output.modes:
        if refresh_rate_is_within_limits(mode.refresh):
            product = mode.width * mode.height
            if product > highest_product:
                highest_product = product
                target_mode = mode

    for mode in output.modes:
        if refresh_rate_is_within_limits(mode.refresh):
            if (
                mode.width == target_mode.width
                and mode.height == target_mode.height
                and mode.refresh > target_mode.refresh
            ):
                target_mode = mode

    return target_mode


def are_modes_equal(a, b):
    return a.width == b.width and a.height == b.height and a.refresh == b.refresh


def set_mode(output, mode):
    sway.command(
        "output "
        + output.name
        + " mode "
        + str(mode.width)
        + "x"
        + str(mode.height)
        + "@"
        + str(mode.refresh / 1000)
        + "Hz"
    )


if result is None:
    if args.handle_reload:
        if os.path.isfile(TMP_FILE_PATH):
            with open(TMP_FILE_PATH, "r") as f:
                result = f.read().strip()

        else:
            result = "auto"

if result is None:
    if len(outputs) < 2:
        best_mode = get_best_mode_from_output(outputs[0])

        if outputs[0] and not outputs[0].active:
            result = outputs[0].name
        elif not are_modes_equal(best_mode, outputs[0].current_mode):
            result = outputs[0].name

        if not result:
            notification(
                "sway_select_display", message="only one output", app_name="sway"
            )
            exit(1)

    else:
        options = ["auto"] + output_names

        result = dotfiles.rofi.dmenu(options)

        if result not in options:
            exit(0)

if result == "auto":
    for output in outputs:
        if "HDMI" in output.name:
            result = output.name
            break

    if result == "auto":
        result = outputs[0].name

for output in outputs:
    if output.name == result:
        if not output.active:
            sway.command("output " + output.name + " enable")

        best_mode = get_best_mode_from_output(output)
        if not are_modes_equal(best_mode, output.current_mode):
            set_mode(output, best_mode)
    else:
        if output.active:
            sway.command("output " + output.name + " disable")

with open(TMP_FILE_PATH, "w") as f:
    f.write(result + "\n")
