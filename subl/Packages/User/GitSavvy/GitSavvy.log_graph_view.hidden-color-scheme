{
	"author": "Arctic Ice Studio",
	"globals":
	{
		"accent": "var(nord8)",
		"active_guide": "var(nord_indent_guide_active)",
		"background": "var(nord0)",
		"brackets_foreground": "var(nord8)",
		"brackets_options": "underline",
		"caret": "var(nord_text)",
		"find_highlight": "var(nord8)",
		"find_highlight_foreground": "var(nord0)",
		"foreground": "var(nord_text)",
		"guide": "var(nord_indent_guide)",
		"gutter": "var(nord0)",
		"gutter_foreground": "var(nord3)",
		"highlight": "var(nord8)",
		"inactive_selection": "var(nord_selection)",
		"invisibles": "var(nord3)",
		"line_diff_added": "var(nord14)",
		"line_diff_deleted": "var(nord11)",
		"line_diff_modified": "var(nord13)",
		"line_highlight": "var(nord1)",
		"minimap_border": "color(var(nord2) alpha(0.32))",
		"misspelling": "var(nord11)",
		"selection": "var(nord_selection)",
		"selection_border": "var(nord_selection)",
		"shadow": "var(nord0)",
		"shadow_width": "8",
		"stack_guide": "var(nord_indent_guide)",
		"tags_foreground": "var(nord8)",
		"tags_options": "underline"
	},
	"name": "Nord",
	"rules":
	[
		{
			"background": "#99991109",
			"foreground": "#991",
			"name": "GitSavvy Highlighted Path Char",
			"scope": "git_savvy.graph.path_char"
		},
		{
			"background": "#991",
			"foreground": "#9911",
			"name": "GitSavvy Highlighted Commit Dot",
			"scope": "git_savvy.graph.dot"
		},
		{
			"foreground": "var(nord3_bright)",
			"name": "[Comment] Comment",
			"scope": "comment, punctuation.definition.comment"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Constants] BuiltIn",
			"scope": "constant.language"
		},
		{
			"foreground": "var(nord_regex)",
			"name": "[Constants] Escape",
			"scope": "constant.character.escape"
		},
		{
			"foreground": "var(nord_number)",
			"name": "[Constants] Numeric",
			"scope": "constant.numeric"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Constants] Other",
			"scope": "constant.other"
		},
		{
			"foreground": "var(nord_regex)",
			"name": "[Constants] Placeholder",
			"scope": "constant.other.placeholder"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Class",
			"scope": "entity.name.class"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Enum",
			"scope": "entity.name.enum"
		},
		{
			"font_style": "bold",
			"foreground": "var(nord_type)",
			"name": "[Entity] Interface",
			"scope": "entity.name.interface"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Struct",
			"scope": "entity.name.struct"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Traits",
			"scope": "entity.name.trait"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Entity] Type",
			"scope": "entity.name.type"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Unions",
			"scope": "entity.name.union"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Inherited Class/Interface/Trait",
			"scope": "entity.other.inherited-class"
		},
		{
			"foreground": "var(nord_function)",
			"name": "[Entity] Function",
			"scope": "entity.name.function"
		},
		{
			"foreground": "var(nord_function)",
			"name": "[Entity] Constructor",
			"scope": "entity.name.function.constructor"
		},
		{
			"foreground": "var(nord_function)",
			"name": "[Entity] Destructor",
			"scope": "entity.name.function.destructor"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Entity] Namespace",
			"scope": "entity.name.namespace"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Entity] Constant",
			"scope": "entity.name.constant"
		},
		{
			"foreground": "var(nord_meta_preprocessor)",
			"name": "[Entity] Label/Goto",
			"scope": "entity.name.label"
		},
		{
			"foreground": "var(nord8)",
			"name": "[Entity] Section",
			"scope": "entity.name.section"
		},
		{
			"foreground": "var(nord_tag)",
			"name": "[Entity] Tag",
			"scope": "entity.name.tag"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Entity] Attribute Name",
			"scope": "entity.other.attribute-name"
		},
		{
			"background": "var(nord_error)",
			"foreground": "var(nord4)",
			"name": "[Invalid] Illegal",
			"scope": "invalid.illegal"
		},
		{
			"background": "var(nord_warning)",
			"foreground": "var(nord4)",
			"name": "[Invalid] Deprecated",
			"scope": "invalid.deprecated"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Keyword] Control",
			"scope": "keyword.control"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Keyword] Control Conditional",
			"scope": "keyword.control.conditional"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Keyword] Control Import",
			"scope": "keyword.control.import"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Keyword] Punctuation Definition",
			"scope": "punctuation.definition.keyword"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Keyword] Other",
			"scope": "keyword.other"
		},
		{
			"foreground": "var(nord_operator)",
			"name": "[Keyword] Operator",
			"scope": "keyword.operator, keyword.operator.assignment, keyword.operator.arithmetic, keyword.operator.bitwise, keyword.operator.logical, keyword.operator.word"
		},
		{
			"foreground": "var(nord8)",
			"name": "[Markup] Heading",
			"scope": "markup.heading"
		},
		{
			"foreground": "var(nord4)",
			"name": "[Markup] List",
			"scope": "markup.list.unnumbered, markup.list.numbered"
		},
		{
			"font_style": "bold",
			"name": "[Markup] Bold",
			"scope": "markup.bold"
		},
		{
			"font_style": "italic",
			"name": "[Markup] Italic",
			"scope": "markup.italic"
		},
		{
			"foreground": "var(nord14)",
			"name": "[Markup] Inserted",
			"scope": "markup.inserted"
		},
		{
			"foreground": "var(nord_error)",
			"name": "[Markup] Deleted",
			"scope": "markup.deleted"
		},
		{
			"foreground": "var(nord_warning)",
			"name": "[Markup] Changed",
			"scope": "markup.changed"
		},
		{
			"foreground": "var(nord_comment)",
			"name": "[Markup] Quote",
			"scope": "markup.quote"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Markup] Raw",
			"scope": "markup.raw.inline, markup.raw.block"
		},
		{
			"background": "var(nord_text)",
			"name": "[Markup] Other",
			"scope": "markup.other"
		},
		{
			"foreground": "var(nord_punctuation)",
			"name": "[Punctuation] Separator/Terminator",
			"scope": "punctuation.separator, punctuation.terminator"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Punctuation] Separator Continuation/Accessor",
			"scope": "punctuation.separator.continuation, punctuation.accessor"
		},
		{
			"foreground": "var(nord_tag)",
			"name": "[Punctuation] Definition Tag",
			"scope": "punctuation.definition.tag"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Storage] Type",
			"scope": "storage.type, storage.modifier"
		},
		{
			"foreground": "var(nord_string)",
			"name": "[String] Quoted/Unquoted",
			"scope": "string.quoted.single, string.quoted.double, string.quoted.triple, string.quoted.other, string.unquoted"
		},
		{
			"foreground": "var(nord_string)",
			"name": "[String] Punctuation Definition",
			"scope": "punctuation.definition.string.begin, punctuation.definition.string.end"
		},
		{
			"foreground": "var(nord_regex)",
			"name": "[String] RegExp",
			"scope": "string.regexp"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Support] Constant",
			"scope": "support.constant"
		},
		{
			"foreground": "var(nord_function)",
			"name": "[Support] Function",
			"scope": "support.function"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Support] Module",
			"scope": "support.module"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Support] Type",
			"scope": "support.type"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Support] Class",
			"scope": "support.class"
		},
		{
			"foreground": "var(nord_text)",
			"name": "[Text] HTML/XML",
			"scope": "text.html.basic, text.xml"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Variable] Other/ReadWrite",
			"scope": "variable.other, variable.other.readwrite"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Variable] Punctuation Definition",
			"scope": "punctuation.definition.variable"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Variable] Constant",
			"scope": "variable.other.constant"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Variable] Language",
			"scope": "variable.language"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Variable] Parameter",
			"scope": "variable.parameter"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Variable] Other Member",
			"scope": "variable.other.member"
		},
		{
			"foreground": "var(nord_function)",
			"name": "[Variable] Function",
			"scope": "variable.function"
		},
		{
			"foreground": "var(nord4)",
			"name": "[Find Results] Gutter Number",
			"scope": "constant.numeric.line-number.find-in-files"
		},
		{
			"foreground": "var(nord8)",
			"name": "[Find Results] Gutter Number Match",
			"scope": "constant.numeric.line-number.match.find-in-files"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Find Results] Filename",
			"scope": "entity.name.filename.find-in-files"
		},
		{
			"foreground": "var(nord4)",
			"name": "[Find Results] Text",
			"scope": "text.find-in-files"
		},
		{
			"foreground": "var(nord_meta_preprocessor)",
			"name": "[C/C++] Preprocessor/Include",
			"scope": "source.c keyword.control.import.include.c, source.c meta.preprocessor.c keyword.control.import.c, source.c++ keyword.control.import.include.c++, source.c++ meta.preprocessor.c++ keyword.control.import.c++"
		},
		{
			"font_style": "italic",
			"foreground": "var(nord_function)",
			"name": "[C/C++] BuiltIn Function",
			"scope": "source.c keyword.operator.word.c, source.c++ keyword.operator.word.c++"
		},
		{
			"foreground": "var(nord4)",
			"name": "[CSS/Sass] Property Name",
			"scope": "source.css support.type.property-name.css, source.sass support.type.property-name.sass, source.css support.type.vendor-prefix.css"
		},
		{
			"foreground": "var(nord_number)",
			"name": "[CSS/Sass] RGB Value",
			"scope": "source.css constant.other.color.rgb-value.css, source.sass constant.other.rgb-value.sass"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[CSS] Property Value",
			"scope": "source.css support.constant.color.w3c-special-color-keyword.css, source.css support.constant.property-value.css, source.sass support.constant.property-value.sass"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[CSS] Pseudo Class",
			"scope": "source.css entity.other.pseudo-class.css"
		},
		{
			"foreground": "var(nord_decorator)",
			"name": "[CSS/Sass] At-Rule",
			"scope": "source.css keyword.control.at-rule.media.css, source.css punctuation.definition.keyword.css, source.sass keyword.control.at-rule.sass"
		},
		{
			"font_style": "italic",
			"foreground": "var(nord_type_primitive)",
			"name": "[CSS] Color Names",
			"scope": "source.css support.constant.color.w3c-standard-color-name.css"
		},
		{
			"font_style": "bold",
			"name": "[CSS/Sass] ID",
			"scope": "source.css entity.other.attribute-name.id.css, source.sass entity.other.attribute-name.id.sass"
		},
		{
			"foreground": "var(nord7)",
			"name": "[diff] Meta Range Context",
			"scope": "source.diff meta.diff.range.context"
		},
		{
			"foreground": "var(nord7)",
			"name": "[diff] Meta Header From-File",
			"scope": "source.diff meta.diff.header.from-file"
		},
		{
			"foreground": "var(nord7)",
			"name": "[diff] Punctuation Definition From-File",
			"scope": "source.diff punctuation.definition.from-file"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[diff] Punctuation Definition Separator",
			"scope": "source.diff punctuation.definition.separator"
		},
		{
			"font_style": "italic",
			"name": "[Go] BuiltIn Function",
			"scope": "source.go support.function.builtin.go"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Go] Type Primitive",
			"scope": "source.go support.type.builtin.go"
		},
		{
			"foreground": "var(nord13)",
			"name": "[HTML] Entity",
			"scope": "text.html.basic constant.character.entity.html"
		},
		{
			"foreground": "var(nord_decorator)",
			"name": "[Java] Annotation",
			"scope": "variable.annotation.java, punctuation.definition.annotation.java"
		},
		{
			"foreground": "var(nord_punctuation)",
			"name": "[Java] Punctuation",
			"scope": "punctuation.accessor.dot.java"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Java] Package",
			"scope": "support.other.package.java"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Java] JavaDoc Comment Block Documentation HTML Entities",
			"scope": "source.java comment.block.documentation.javadoc punctuation.definition.entity.html"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Java] Constant",
			"scope": "source.java entity.name.constant"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Java] JavaDoc Tags",
			"scope": "source.java keyword.other.documentation, source.java comment.block.documentation.javadoc punctuation.definition.keyword.javadoc"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Java] Generic",
			"scope": "source.java variable.parameter.type.java"
		},
		{
			"font_style": "bold",
			"foreground": "var(nord_type)",
			"name": "[Java] Interface",
			"scope": "source.java entity.other.inherited-class.java"
		},
		{
			"foreground": "var(nord_keyword)",
			"name": "[Java] Implements Keyword",
			"scope": "source.java keyword.declaration.implements.java"
		},
		{
			"foreground": "var(nord7)",
			"name": "[JSON] Key",
			"scope": "source.json meta.structure.dictionary.json meta.structure.dictionary.key.json string.quoted.double.json, source.json.sublime meta.structure.dictionary.json meta.structure.dictionary.key.json string.quoted.double.json"
		},
		{
			"foreground": "var(nord_punctuation)",
			"name": "[JSON] Quote Punctuation",
			"scope": "source.json meta.structure.dictionary.json punctuation.definition.string.begin.json, source.json meta.structure.dictionary.json punctuation.definition.string.end.json, source.json.sublime meta.structure.dictionary.json punctuation.definition.string.begin.json, source.json.sublime meta.structure.dictionary.json punctuation.definition.string.end.json"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Markdown] Fenced Code Block",
			"scope": "text.html.markdown punctuation.definition.raw.code-fence.begin.markdown, text.html.markdown punctuation.definition.raw.code-fence.end.markdown, text.html.markdown markup.raw.code-fence.markdown constant.other.language-name.markdown"
		},
		{
			"foreground": "var(nord9)",
			"name": "[Markdown] List Bullet",
			"scope": "text.html.markdown punctuation.definition.list_item.markdown, text.html.markdown markup.list.numbered.bullet.markdown"
		},
		{
			"foreground": "var(nord7)",
			"name": "[Markdown] Quote Punctuation",
			"scope": "text.html.markdown markup.quote.markdown punctuation.definition.blockquote.markdown"
		},
		{
			"foreground": "var(nord8)",
			"name": "[Markdown] Link Description",
			"scope": "text.html.markdown meta.link.inline.description.markdown, text.html.markdown meta.image.inline.description.markdown, text.html.markdown meta.link.reference.description.markdown, text.html.markdown constant.other.reference.link.markdown, text.html.markdown entity.name.reference.link.markdown"
		},
		{
			"foreground": "var(nord9)",
			"name": "[Markdown] Link Punctuation",
			"scope": "text.html.markdown punctuation.definition.link.begin.markdown, text.html.markdown punctuation.definition.link.end.markdown, text.html.markdown punctuation.definition.image.begin.markdown, text.html.markdown punctuation.definition.image.end.markdown, text.html.markdown punctuation.definition.constant.begin.markdown, text.html.markdown punctuation.definition.constant.end.markdown"
		},
		{
			"foreground": "var(nord9)",
			"name": "[Markdown] Table Punctuation",
			"scope": "text.html.markdown punctuation.separator.table-cell.markdown, text.html.markdown punctuation.section.table-header.markdown"
		},
		{
			"foreground": "var(nord8)",
			"name": "[Markdown] Table Header",
			"scope": "text.html.markdown meta.table.header.markdown"
		},
		{
			"font_style": "bold",
			"foreground": "var(nord9)",
			"name": "[Markdown] Horizontal Line",
			"scope": "text.html.markdown punctuation.definition.thematic-break.markdown"
		},
		{
			"foreground": "var(nord_meta_preprocessor)",
			"name": "[PHP] Embedded Tag",
			"scope": "embedding.php text.html.basic punctuation.section.embedded.begin.php, embedding.php text.html.basic punctuation.section.embedded.end.php"
		},
		{
			"foreground": "var(nord7)",
			"name": "[PHP] PHPDoc Tag",
			"scope": "embedding.php text.html.basic comment.block.documentation.phpdoc.php keyword.other.phpdoc.php"
		},
		{
			"foreground": "var(nord7)",
			"name": "[PHP] Namespace",
			"scope": "embedding.php text.html.basic support.other.namespace.php"
		},
		{
			"foreground": "var(nord_decorator)",
			"name": "[Python] Decorator",
			"scope": "source.python meta.annotation.python meta.qualified-name.python support.function.builtin.python, source.python punctuation.definition.annotation.python"
		},
		{
			"font_style": "italic",
			"name": "[Python] BuiltIn Function",
			"scope": "support.function.builtin.python"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Python] Exception",
			"scope": "source.python support.type.exception.python"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[Python] Type",
			"scope": "source.python support.type.python"
		},
		{
			"font_style": "bold",
			"foreground": "var(nord_variable)",
			"name": "[Sass] Variable",
			"scope": "source.sass variable.parameter.sass"
		},
		{
			"font_style": "italic",
			"name": "[Ruby] BuiltIn Function",
			"scope": "source.ruby support.function.builtin.ruby"
		},
		{
			"font_style": "italic",
			"name": "[Shell] BuiltIn Function",
			"scope": "source.shell support.function.builtin.shell"
		},
		{
			"foreground": "var(nord7)",
			"name": "[XML] Namespace",
			"scope": "text.xml entity.name.tag.namespace"
		},
		{
			"foreground": "var(nord_meta_preprocessor)",
			"name": "[XML] Doctype/Preprocessor",
			"scope": "text.xml meta.tag.sgml.doctype.xml, text.xml meta.tag.preprocessor entity.name.tag, text.xml meta.tag.preprocessor.xml punctuation.definition.tag.begin.xml, text.xml meta.tag.preprocessor.xml punctuation.definition.tag.end.xml, text.xml meta.tag.sgml.doctype.xml punctuation.definition.tag.begin.xml, text.xml meta.tag.sgml.doctype.xml punctuation.definition.tag.end.xml"
		},
		{
			"font_style": "italic",
			"foreground": "var(nord12)",
			"name": "[XML] CDATA Tag",
			"scope": "text.xml string.unquoted.cdata.xml punctuation.definition.string.begin.xml, text.xml string.unquoted.cdata.xml punctuation.definition.string.end.xml"
		},
		{
			"foreground": "var(nord7)",
			"name": "[YAML] Entity Name Tag",
			"scope": "source.yaml entity.name.tag"
		},
		{
			"foreground": "var(nord_warning)",
			"name": "[SublimeLinter] Warning",
			"scope": "sublimelinter.mark.warning"
		},
		{
			"foreground": "var(nord_error)",
			"name": "[SublimeLinter] Error",
			"scope": "sublimelinter.mark.error"
		},
		{
			"foreground": "lime",
			"name": "[SublimeLinter] Gutter Mark",
			"scope": "sublimelinter.gutter-mark"
		},
		{
			"foreground": "var(nord_comment)",
			"name": "[GitGutter] Ignored",
			"scope": "markup.ignored.git_gutter"
		},
		{
			"foreground": "var(nord8)",
			"name": "[GitGutter] Untracked",
			"scope": "markup.untracked.git_gutter"
		},
		{
			"foreground": "var(nord14)",
			"name": "[GitGutter] Inserted",
			"scope": "markup.inserted.git_gutter"
		},
		{
			"foreground": "var(nord_warning)",
			"name": "[GitGutter] Changed",
			"scope": "markup.changed.git_gutter"
		},
		{
			"foreground": "var(nord_error)",
			"name": "[GitGutter] Deleted",
			"scope": "markup.deleted.git_gutter"
		},
		{
			"foreground": "var(nord_decorator)",
			"name": "[Babel] Decorator",
			"scope": "source.js tag.decorator.js entity.name.tag.js, source.js tag.decorator.js punctuation.definition.tag.js"
		},
		{
			"foreground": "var(nord_string)",
			"name": "[Babel] String (Interpolated/Template Expression)",
			"scope": "source.js string.quoted.js, source.js string.quoted.jsx, source.js meta.class.js meta.class.property.js string.interpolated.js, source.js string.interpolated.js, source.js string.template.js"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Babel] Constant",
			"scope": "source.js variable.other.constant.js"
		},
		{
			"foreground": "var(nord_variable)",
			"name": "[Babel] Object Key/Variable",
			"scope": "source.js constant.other.object.key.js string.unquoted.label.js, source.js variable.other.readwrite.js"
		},
		{
			"foreground": "var(nord_function)",
			"name": "[Babel] Arrow Function",
			"scope": "source.js meta.class.js meta.class.property.js variable.other.property.js"
		},
		{
			"font_style": "italic",
			"name": "[Babel] Static Variable",
			"scope": "source.js variable.other.property.static.js"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Babel] React JSX Tag",
			"scope": "source.js entity.name.tag.jsx"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[Babel] Class",
			"scope": "source.js variable.other.class.js"
		},
		{
			"foreground": "var(nord_meta_preprocessor)",
			"name": "[Babel] String Interpolated/Template Expression Keyword",
			"scope": "source.js string.interpolated.js keyword.other.substitution.begin.js, source.js string.interpolated.js keyword.other.substitution.end.js, source.js punctuation.definition.template-expression.begin.js, source.js punctuation.definition.template-expression.end.js"
		},
		{
			"foreground": "var(nord_operator)",
			"name": "[Babel] Spread Operator",
			"scope": "source.js keyword.operator.spread.js"
		},
		{
			"font_style": "bold",
			"foreground": "var(nord_type)",
			"name": "[TypeScript] Inherited Class",
			"scope": "source.ts meta.class.ts entity.other.inherited-class.ts"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[TypeScript] Class/Enum",
			"scope": "source.ts entity.name.type.class.ts, source.ts entity.name.type.enum.ts"
		},
		{
			"foreground": "var(nord_type)",
			"name": "[TypeScript] Type",
			"scope": "source.ts entity.name.type.ts"
		},
		{
			"foreground": "var(nord_type_primitive)",
			"name": "[TypeScript] Primitive",
			"scope": "source.ts support.type.primitive.ts"
		},
		{
			"foreground": "var(nord_decorator)",
			"name": "[TypeScript] Decorator",
			"scope": "source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.decorator.ts variable.other.readwrite.ts, source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.decorator.ts punctuation.decorator.ts"
		},
		{
			"foreground": "var(nord_meta_preprocessor)",
			"name": "[TypeScript] Interpolated String Keyword",
			"scope": "source.ts punctuation.definition.template-expression.begin.ts, source.ts punctuation.definition.template-expression.end.ts"
		},
		{
			"foreground": "var(nord_string)",
			"name": "[TypeScript] Interpolated String",
			"scope": "source.ts string.template.ts"
		},
		{
			"font_style": "italic",
			"name": "[TypeScript] Static Support Function",
			"scope": "source.ts support.function.math.ts"
		},
		{
			"font_style": "bold",
			"foreground": "var(nord_variable)",
			"name": "[TypeScript] Constant",
			"scope": "source.ts variable.other.constant.property.ts, source.ts variable.other.enummember.ts, source.ts variable.other.constant.ts"
		},
		{
			"foreground": "var(nord7)",
			"name": "[TypeScript] JSDoc Tag",
			"scope": "source.ts comment.block.documentation.ts storage.type.class.jsdoc"
		}
	],
	"variables":
	{
		"nord0": "#2e3440",
		"nord1": "#3b4252",
		"nord10": "#5e81ac",
		"nord11": "#bf616a",
		"nord12": "#d08770",
		"nord13": "#ebcb8b",
		"nord14": "#a3be8c",
		"nord15": "#b48ead",
		"nord2": "#434c5e",
		"nord3": "#4c566a",
		"nord3_bright": "#616e88",
		"nord4": "#d8dee9",
		"nord5": "#e5e9f0",
		"nord6": "#eceff4",
		"nord7": "#8fbcbb",
		"nord8": "#88c0d0",
		"nord9": "#81a1c1",
		"nord_comment": "var(nord3_bright)",
		"nord_decorator": "var(nord12)",
		"nord_error": "var(nord11)",
		"nord_function": "var(nord8)",
		"nord_indent_guide": "color(var(nord2) alpha(0.7))",
		"nord_indent_guide_active": "var(nord3)",
		"nord_keyword": "var(nord9)",
		"nord_meta_preprocessor": "var(nord10)",
		"nord_number": "var(nord15)",
		"nord_operator": "var(nord9)",
		"nord_punctuation": "var(nord6)",
		"nord_regex": "var(nord13)",
		"nord_selection": "color(var(nord2) alpha(0.8))",
		"nord_string": "var(nord14)",
		"nord_tag": "var(nord9)",
		"nord_text": "var(nord4)",
		"nord_type": "var(nord7)",
		"nord_type_primitive": "var(nord9)",
		"nord_variable": "var(nord4)",
		"nord_warning": "var(nord13)"
	}
}
