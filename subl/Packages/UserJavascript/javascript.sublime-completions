{
  "scope": "source.js, source.jsx",
  "completions":
  [
    { "trigger": "std\tstyled", "contents": "styled.${1:div}`\n\t$0\n`" },
    { "trigger": "im\timport", "contents": "import $1 from '$0';" },
    { "trigger": "imn\timport named", "contents": "import { $1 } from '$0';" },
    { "trigger": "imm\timport messages", "contents": "import messages from './messages';" },
    { "trigger": "imc\timport component", "contents": "import $0 from 'components/$0';" },
    { "trigger": "imt\timport type", "contents": "import type { $1 } from '${0:./types}';" },
    { "trigger": "ime\timport React", "contents": "import React from 'react';" },
    { "trigger": "ims\timport styled", "contents": "import styled from 'styled-components';" },
    { "trigger": "iml\timport Link", "contents": "import { Link } from 'react-router';" },
    { "trigger": "imr\timport relative", "contents": "import $1 from './${0:$1}';" },
    { "trigger": "imf\timport FormattedMessage", "contents": "import { FormattedMessage } from 'react-intl';" },
    { "trigger": "imk\timport key", "contents": "import { key } from 'styled-theme';" },
    { "trigger": "imp\timport prop", "contents": "import { prop } from 'styled-tools';" },
    { "trigger": "imme\timport media", "contents": "import { media } from 'commons/utils/styles';" },
    { "trigger": "imu\timport utils", "contents": "import $1 from 'utils/${0:$1}';" },
    { "trigger": "imcf\timport commons/factories", "contents": "import { $0 } from 'commons/factories';" },
    { "trigger": "ed\texport default", "contents": "export default $0;" },

    { "trigger": "st\tstimulus", "contents": "window.Folio.Stimulus.register('$1', class extends window.Stimulus.Controller {\n\t$0\n})" },

    { "trigger": "for", "contents": "for (let ${1:i} = 0; ${1:i} < ${2:ary}.length; ${1:i} += 1) {\n\t${0}\n}" },

    { "trigger": "fs\tblank function", "contents": "() => {}" },

    { "trigger": "bp\tdebugger", "contents": "debugger" },
    { "trigger": "f\tfunction", "contents": "function ($1) {\n\t$0\n}" },

    { "trigger": "dc|document-click", "contents": "\\$(document)\n\t.on('click', '$1', (e) => {\n\t\t$0\n\t})" },

    // turbolinks
    { "trigger": "tu|turbolinks", "contents": "\\$(document)\n\t.on('turbolinks:load', () => {\n\t\t$0\n\t})\n\t.on('turbolinks:before-render', () => {})" }
  ]
}
